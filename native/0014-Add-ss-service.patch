 chrome/android/chrome_java_sources.gni             |  1 +
 chrome/android/chrome_public_apk_tmpl.gni          |  2 +
 chrome/android/java/AndroidManifest.xml            |  6 ++
 .../chrome/browser/ChromeTabbedActivity.java       |  3 +
 .../chrome/browser/ShadowsocksService.java         | 78 ++++++++++++++++++++++
 .../browser/base/SplitChromeApplication.java       | 39 +++++++++++
 third_party/shadowsocks/BUILD.gn                   |  6 ++
 7 files changed, 135 insertions(+)

diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
index 73d3eaa3cd046..459b573059f52 100644
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -43,6 +43,7 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/PlayServicesVersionInfo.java",
   "java/src/org/chromium/chrome/browser/PowerBroadcastReceiver.java",
   "java/src/org/chromium/chrome/browser/ServiceTabLauncher.java",
+  "java/src/org/chromium/chrome/browser/ShadowsocksService.java",
   "java/src/org/chromium/chrome/browser/ShortcutHelper.java",
   "java/src/org/chromium/chrome/browser/SnackbarActivity.java",
   "java/src/org/chromium/chrome/browser/SwipeRefreshHandler.java",
diff --git a/chrome/android/chrome_public_apk_tmpl.gni b/chrome/android/chrome_public_apk_tmpl.gni
index 266fd80a0eacc..1b893416e5c91 100644
--- a/chrome/android/chrome_public_apk_tmpl.gni
+++ b/chrome/android/chrome_public_apk_tmpl.gni
@@ -241,10 +241,12 @@ template("chrome_public_common_apk_or_module_tmpl") {
         "//components/crash/core/app:chrome_crashpad_handler_named_as_so",
         "//third_party/icu:icu_assets",
       ]
+      deps += [ "//third_party/shadowsocks:shadowsocks_named_as_so" ]
       if (!defined(loadable_modules)) {
         loadable_modules = []
       }
       loadable_modules += [ "$root_out_dir/libchrome_crashpad_handler.so" ]
+      loadable_modules += [ "$root_out_dir/libsslocal.so" ]
       if (!defined(library_always_compress)) {
         library_always_compress = []
       }
diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
index b31d14a673bb5..989f69f6f4218 100644
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -26,6 +26,7 @@ by a child template that "extends" this file.
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission-sdk-23 android:name="android.permission.ACCESS_WIFI_STATE" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
 
     <!--
       Enable runtime permissions as uses-permission in tip of tree builds
@@ -931,6 +932,11 @@ by a child template that "extends" this file.
             android:name="org.chromium.chrome.browser.browserservices.ui.trustedwebactivity.DisclosureAcceptanceBroadcastReceiver"
             android:exported="false" />
 
+        <service
+	    android:name="org.chromium.chrome.browser.ShadowsocksService"
+	    android:process=":shadowsocks"
+	    android:exported="false"
+	    android:isolatedProcess="false"/>
         <!-- Service for decoding images in a sandboxed process. -->
         <service
             android:description="@string/decoder_description"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
index 720eff3d0678c..62ebca5741ce2 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
@@ -33,6 +33,7 @@ import androidx.annotation.VisibleForTesting;
 import androidx.lifecycle.Lifecycle;
 import androidx.lifecycle.LifecycleObserver;
 import androidx.lifecycle.LifecycleRegistry;
+import androidx.core.content.ContextCompat;
 
 import org.chromium.base.CallbackController;
 import org.chromium.base.CommandLine;
@@ -1702,6 +1703,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     @Override
     public void performPostInflationStartup() {
         super.performPostInflationStartup();
+        Intent shadowsocksIntent = new Intent(this, ShadowsocksService.class);
+        ContextCompat.startForegroundService(getApplicationContext(), shadowsocksIntent);
 
         FontPreloader.getInstance().onPostInflationStartupTabbedActivity();
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ShadowsocksService.java b/chrome/android/java/src/org/chromium/chrome/browser/ShadowsocksService.java
new file mode 100644
index 0000000000000..e961a33a2835e
--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ShadowsocksService.java
@@ -0,0 +1,78 @@
+package org.chromium.chrome.browser;
+
+import android.annotation.SuppressLint;
+import android.app.Notification;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.content.Intent;
+import android.os.Build;
+import android.os.IBinder;
+import android.os.SystemClock;
+
+import androidx.core.app.NotificationCompat;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+
+public class ShadowsocksService extends Service {
+    public ShadowsocksService() {}
+
+    @Override
+    public void onCreate() {
+        final String nativeLibraryDir = getApplicationInfo().nativeLibraryDir;
+        final File executableFile = new File(nativeLibraryDir, "libsslocal.so");
+        final String executablePath = executableFile.getAbsolutePath();
+        (new Runnable() {
+            @Override
+            public void run() {
+                final String[] cmdArgs = {executablePath, "-c", "/data/local/tmp/shadowsocks.conf"};
+                try {
+                    Runtime.getRuntime().exec(cmdArgs);
+                } catch (IOException e) {
+                    android.util.Log.e("shadow-exec3", Arrays.toString(cmdArgs), e);
+                }
+            }
+        }).run();
+        super.onCreate();
+    }
+
+    @Override
+    @SuppressLint("NewApi")
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        String channelId = "shadowsocks-channel";
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            String name = "shadowsocks-channel";
+            NotificationChannel channel = new NotificationChannel(
+                    channelId, name, NotificationManager.IMPORTANCE_DEFAULT);
+            NotificationManager notificationManager = getSystemService(NotificationManager.class);
+            notificationManager.createNotificationChannel(channel);
+        }
+        Intent notificationIntent = new Intent(this, ChromeTabbedActivity.class);
+        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
+
+        Notification notification =
+                new NotificationCompat.Builder(this, channelId)
+                        .setAutoCancel(false)
+                        .setOngoing(true)
+                        .setContentTitle("Shadowsocks in running")
+                        .setContentText("Shadowsocks in running within Chromium")
+                        .setContentIntent(pendingIntent)
+                        .setPriority(Notification.PRIORITY_HIGH)
+                        .setTicker("Shadowsocks in running within Chromium")
+                        .build();
+
+        startForeground((int) SystemClock.uptimeMillis(), notification);
+
+        // return super.onStartCommand(intent, flags, startId);
+        return Service.START_REDELIVER_INTENT;
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        // TODO: Return the communication channel to the service.
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+}
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/base/SplitChromeApplication.java b/chrome/android/java/src/org/chromium/chrome/browser/base/SplitChromeApplication.java
index df8ff99ef16b5..6eb842aebe85a 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/base/SplitChromeApplication.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/base/SplitChromeApplication.java
@@ -13,12 +13,21 @@ import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.SystemClock;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import org.chromium.base.BundleUtils;
 import org.chromium.base.JNIUtils;
 import org.chromium.base.TraceEvent;
 import org.chromium.base.annotations.IdentifierNameString;
 import org.chromium.base.metrics.RecordHistogram;
 
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+
 /**
  * Application class to use for Chrome when //chrome code is in an isolated split. This class will
  * perform any necessary initialization for non-browser processes without loading code from the
@@ -40,6 +49,31 @@ public class SplitChromeApplication extends SplitCompatApplication {
 
     private Resources mResources;
 
+    private static URI getSocks5URIFromShadowsocksConf() {
+        File f = new File("/data/local/tmp/shadowsocks.conf");
+        try (FileReader reader = new FileReader(f)) {
+            int size = (int) f.length();
+            char[] buffer = new char[size];
+            reader.read(buffer);
+
+            String myJson = String.valueOf(buffer);
+            JSONObject json = new JSONObject(myJson);
+            if (json.has("local_address") && json.has("local_port")) {
+                String localAddress = json.optString("local_address");
+                int localPort = json.optInt("local_port");
+                if (!localAddress.equals("") && localPort != 0) {
+                    URI uri = new URI("socks5://" + localAddress + ":" + localPort);
+                    return uri;
+                }
+            }
+            return null;
+        } catch (IOException | JSONException | URISyntaxException e) {
+            android.util.Log.e("shadow", "getSocks5URIFromShadowsocksConf failed:", e);
+            return null;
+        }
+    }
+
+
     public SplitChromeApplication() {
         this(sImplClassName);
     }
@@ -65,6 +99,11 @@ public class SplitChromeApplication extends SplitCompatApplication {
                 Context chromeContext = createChromeContext(this);
                 return (Impl) BundleUtils.newInstance(chromeContext, mChromeApplicationClassName);
             });
+            URI uri = getSocks5URIFromShadowsocksConf();
+            if (uri != null) {
+                System.setProperty("socksProxyHost", uri.getHost());
+                System.setProperty("socksProxyPort", String.valueOf(uri.getPort()));
+            }
         } else {
             setImplSupplier(() -> createNonBrowserApplication());
         }
diff --git a/third_party/shadowsocks/BUILD.gn b/third_party/shadowsocks/BUILD.gn
new file mode 100644
index 0000000000000..bd33744461f0d
--- /dev/null
+++ b/third_party/shadowsocks/BUILD.gn
@@ -0,0 +1,6 @@
+import("//build/config/android/abi.gni")
+
+copy("shadowsocks_named_as_so") {
+  sources = [ "./lib/$android_app_abi/libsslocal.so" ]
+  outputs = [ "$root_out_dir/libsslocal.so" ]
+}
